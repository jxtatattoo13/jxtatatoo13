{"version":3,"sources":["webpack:///./node_modules/@lekoarts/gatsby-theme-jodie/src/components/project.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-jodie-core/src/templates/project-query.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-jodie/src/@lekoarts/gatsby-theme-jodie-core/components/project.tsx"],"names":["Project","data","project","images","location","color","undefined","title","description","excerpt","pathname","image","cover","childImageSharp","resize","src","sx","variant","fontSize","textTransform","letterSpacing","mb","category","as","mt","maxWidth","my","body","backgroundColor","transparentize","nodes","map","key","name","alt","fluid","ProjectComponent","children","props","query"],"mappings":"mQAgEeA,EA3BiC,SAAC,GAAD,QAAGC,KAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,OAAUC,EAA9B,EAA8BA,SAA9B,OAC9C,YAAC,IAAD,CAAQC,MAAOH,EAAQG,YAASC,GAC9B,YAAC,IAAD,CACEC,MAAOL,EAAQK,MACfC,YAAaN,EAAQO,QACrBC,SAAUN,EAASM,SACnBC,MAAOT,EAAQU,MAAMC,gBAAgBC,OAAOC,MAE9C,mBAAKC,GAAI,CAAEC,QAAS,oBAClB,mBAAKD,GAAI,CAAEE,SAAU,EAAGC,cAAe,YAAaC,cAAe,QAASC,GAAI,IAAMnB,EAAQoB,UAC9F,YAAC,IAAD,CAASC,GAAG,KAAKN,QAAQ,YAAYD,GAAI,CAAEQ,GAAI,IAC5CtB,EAAQK,OAEX,mBAAKS,GAAI,CAAES,SAAU,OAAQC,GAAI,IAC/B,YAAC,cAAD,KAAcxB,EAAQyB,QAG1B,mBAAKX,GAAI,CAAEY,gBAAiBC,YAAe,GAAK3B,EAAQG,SACtD,mBAAKW,GAAI,CAAEC,QAAS,sBACjBd,EAAO2B,MAAMC,KAAI,SAACpB,GAAD,OAChB,YAAC,IAAD,CAAKqB,IAAKrB,EAAMsB,KAAMC,IAAKvB,EAAMsB,KAAME,MAAOxB,EAAME,gBAAgBsB,eCtD/DC,UCeA,YAAwE,IAA5CC,EAA4C,EAA5CA,SAAaC,EAA+B,4BACrF,OAAO,gBAAC,EAAYA,EAAQD,IDhBfD,IAEFG,EAAQ","file":"component---node-modules-lekoarts-gatsby-theme-jodie-core-src-templates-project-query-tsx-7be84e3b1b3363e6ee53.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, Heading } from \"theme-ui\"\nimport * as React from \"react\"\nimport { PageProps } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\nimport { transparentize } from \"polished\"\nimport Layout from \"./layout\"\nimport SEO from \"./seo\"\nimport { ChildImageSharp } from \"../types\"\n\ntype DataProps = {\n  project: {\n    body: string\n    excerpt: string\n    color: string\n    date: string\n    slug: string\n    title: string\n    shortTitle: string\n    category: string\n    cover: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n  images: {\n    nodes: {\n      name: string\n      childImageSharp: ChildImageSharp[\"childImageSharp\"]\n    }[]\n  }\n}\n\nconst Project: React.FC<PageProps<DataProps>> = ({ data: { project, images }, location }) => (\n  <Layout color={project.color || undefined}>\n    <SEO\n      title={project.title}\n      description={project.excerpt}\n      pathname={location.pathname}\n      image={project.cover.childImageSharp.resize.src}\n    />\n    <div sx={{ variant: `content.project` }}>\n      <div sx={{ fontSize: 2, textTransform: `uppercase`, letterSpacing: `wider`, mb: 2 }}>{project.category}</div>\n      <Heading as=\"h1\" variant=\"styles.h1\" sx={{ mt: 0 }}>\n        {project.title}\n      </Heading>\n      <div sx={{ maxWidth: `70ch`, my: 4 }}>\n        <MDXRenderer>{project.body}</MDXRenderer>\n      </div>\n    </div>\n    <div sx={{ backgroundColor: transparentize(0.9, project.color) }}>\n      <div sx={{ variant: `content.imageList` }}>\n        {images.nodes.map((image) => (\n          <Img key={image.name} alt={image.name} fluid={image.childImageSharp.fluid} />\n        ))}\n      </div>\n    </div>\n  </Layout>\n)\n\nexport default Project\n","import { graphql } from \"gatsby\"\nimport ProjectComponent from \"../components/project\"\n\nexport default ProjectComponent\n\nexport const query = graphql`\n  query($slug: String!, $formatString: String!, $relativeDirectory: String!) {\n    project(slug: { eq: $slug }) {\n      body\n      excerpt\n      color\n      date(formatString: $formatString)\n      slug\n      title\n      shortTitle\n      category\n      cover {\n        childImageSharp {\n          resize(width: 1200, quality: 85) {\n            src\n          }\n        }\n      }\n    }\n    images: allFile(\n      filter: {\n        relativeDirectory: { eq: $relativeDirectory }\n        extension: { regex: \"/(jpg)|(png)|(tif)|(tiff)|(webp)|(jpeg)/\" }\n      }\n    ) {\n      nodes {\n        name\n        childImageSharp {\n          fluid(maxWidth: 1600, quality: 90) {\n            ...GatsbyImageSharpFluid_withWebp\n          }\n        }\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport { PageProps } from \"gatsby\"\nimport Project from \"../../../components/project\"\n\ntype DataProps = {\n  project: {\n    body: string\n    excerpt: string\n    color: string\n    date: string\n    type: string\n    slug: string\n    title: string\n    shortTitle: string\n    category: string\n  }\n}\n\nexport default function JodieCoreProject({ children, ...props }: PageProps<DataProps>) {\n  return <Project {...props}>{children}</Project>\n}\n"],"sourceRoot":""}